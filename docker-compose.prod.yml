version: '3.8'

# üè≠ Docker Compose - Production Environment
# Usage: docker-compose -f docker-compose.prod.yml up -d

services:
  # üóÑÔ∏è PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ecommerce-network-prod
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Production security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # üîÑ Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - ecommerce-network-prod
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '--no-auth-warning',
          '-a',
          '${REDIS_PASSWORD}',
          'ping',
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # üöÄ NestJS Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${VERSION}
    container_name: ecommerce-app-prod
    restart: always
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      API_PREFIX: ${API_PREFIX:-api/v1}

      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSL: 'true'
      DATABASE_SYNCHRONIZE: 'false'
      DATABASE_LOGGING: 'false'

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE_ENABLED: 'true'
      LOG_CONSOLE_ENABLED: 'false'

      # Security
      CORS_ORIGIN: ${CORS_ORIGIN}

    ports:
      - '${APP_PORT:-3000}:3000'
    volumes:
      - ./logs:/app/logs
    networks:
      - ecommerce-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause

  # üîÑ NGINX Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx-prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - ecommerce-network-prod
    depends_on:
      - app
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

# üíæ Named Volumes for Production Data
volumes:
  postgres_data_prod:
    driver: local
    name: ecommerce_postgres_data_prod
  redis_data_prod:
    driver: local
    name: ecommerce_redis_data_prod

# üåê Production Network
networks:
  ecommerce-network-prod:
    driver: bridge
    name: ecommerce_network_prod
    driver_opts:
      com.docker.network.bridge.enable_icc: 'false'
      com.docker.network.bridge.enable_ip_masquerade: 'true'
