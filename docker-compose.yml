version: '3.8'

# üöÄ Docker Compose - Development Environment
# Para producci√≥n usar: docker-compose -f docker-compose.prod.yml up

services:
  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ecommerce_catalog}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-host=md5 --auth-local=md5'
    ports:
      - '${DATABASE_PORT:-5433}:5432'
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ecommerce-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-ecommerce_catalog}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # üîÑ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data_dev:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ecommerce-network
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '--no-auth-warning',
          '-a',
          '${REDIS_PASSWORD:-redis123}',
          'ping',
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    security_opt:
      - no-new-privileges:true

  # üîß pgAdmin for Database Management (Development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ecommerce.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - '${PGADMIN_PORT:-8080}:80'
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools
    security_opt:
      - no-new-privileges:true

  # üöÄ NestJS Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-dev}
    container_name: ecommerce-app-dev
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: development
      PORT: 3000
      API_PREFIX: ${API_PREFIX:-api/v1}

      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-ecommerce_catalog}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres123}
      DATABASE_SSL: 'false'
      DATABASE_SYNCHRONIZE: 'false'
      DATABASE_LOGGING: 'true'

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}

      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_FILE_ENABLED: 'true'
      LOG_CONSOLE_ENABLED: 'true'

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:8080}

    ports:
      - '${APP_PORT:-3000}:3000'
      - '${DEBUG_PORT:-9229}:9229'
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true

  # üìä Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus-dev
    restart: unless-stopped
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_dev:/prometheus
    networks:
      - ecommerce-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

  # üìà Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana-dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - '${GRAFANA_PORT:-3001}:3000'
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ecommerce-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

# üíæ Named Volumes for Data Persistence
volumes:
  postgres_data_dev:
    driver: local
    name: ecommerce_postgres_data_dev
  redis_data_dev:
    driver: local
    name: ecommerce_redis_data_dev
  pgadmin_data_dev:
    driver: local
    name: ecommerce_pgadmin_data_dev
  prometheus_data_dev:
    driver: local
    name: ecommerce_prometheus_data_dev
  grafana_data_dev:
    driver: local
    name: ecommerce_grafana_data_dev

# üåê Networks
networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce_network_dev
    # Network security
    driver_opts:
      com.docker.network.bridge.enable_icc: 'true'
      com.docker.network.bridge.enable_ip_masquerade: 'true'
