name: 🚀 CI/CD Pipeline - Enterprise Grade

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_DB: ecommerce_catalog_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres123
  JWT_SECRET: test-jwt-secret-for-ci
  JWT_REFRESH_SECRET: test-refresh-secret-for-ci

jobs:
  # 🔍 Quality Gates: Linting & TypeScript
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🧹 ESLint Check
        run: npm run lint:check

      - name: 🔧 TypeScript Check
        run: npx tsc --noEmit

      - name: 💄 Prettier Format Check
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

  # 🧪 Unit & Integration Tests
  unit-tests:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gates

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🗄️ Setup Database
        run: |
          npm run migration:run
          npm run seed
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ env.POSTGRES_DB }}
          DATABASE_USER: ${{ env.POSTGRES_USER }}
          DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: 🧪 Run Unit Tests
        run: npm run test:cov
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ env.POSTGRES_DB }}
          DATABASE_USER: ${{ env.POSTGRES_USER }}
          DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: ${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ env.JWT_REFRESH_SECRET }}

      - name: 📊 Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: 📈 Coverage Comment
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: coverage/coverage-summary.json
          title: 📊 Test Coverage Report
          summary-title: Coverage Summary
          badge-title: Coverage Badge
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Jest Results
          junitxml-path: coverage/junit.xml

  # 🎯 E2E Tests
  e2e-tests:
    name: 🎯 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🗄️ Setup Test Database
        run: |
          npm run migration:run
          npm run seed
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ env.POSTGRES_DB }}
          DATABASE_USER: ${{ env.POSTGRES_USER }}
          DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: 🎯 Run E2E Tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ env.POSTGRES_DB }}
          DATABASE_USER: ${{ env.POSTGRES_USER }}
          DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: ${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ env.JWT_REFRESH_SECRET }}

      - name: 📋 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test/results/
          retention-days: 30

  # 🔒 Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gates

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔍 NPM Audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Build for CodeQL
        run: npm run build

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 🐳 Docker Build & Security
  docker-build:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, e2e-tests]

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          tags: ecommerce-monolith:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔒 Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ecommerce-monolith:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 📊 Quality Summary
  quality-summary:
    name: 📊 Quality Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, unit-tests, e2e-tests, security-scan, docker-build]
    if: always()

    steps:
      - name: 📊 Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.quality-gates.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Coverage Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- **Minimum Coverage:** 90%" >> $GITHUB_STEP_SUMMARY
          echo "- **TypeScript:** Strict Mode ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting:** Zero Errors Required ✅" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Fail if Quality Gates Failed
        if: needs.quality-gates.result != 'success' || needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success'
        run: |
          echo "❌ Quality gates failed! Check the summary above."
          exit 1

  # 🚀 Deploy to Staging (only on develop)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-summary
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    # environment: staging  # Uncomment when environment is configured in GitHub

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          # Add actual deployment commands here

  # 📦 Deploy to Production (only on main with manual approval)
  deploy-production:
    name: 📦 Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-summary
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment: production  # Uncomment when environment is configured in GitHub

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Deploy to Production
        run: |
          echo "📦 Deploying to production environment..."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          # Add actual deployment commands here
